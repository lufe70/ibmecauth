{"ast":null,"code":"// src/services/api.js\nimport { API_URL } from '../utils/constants';\nexport const initiateLogin = () => {\n  window.location.href = `${API_URL}/auth/login`;\n};\nexport const fetchUserData = async token => {\n  try {\n    const response = await fetch(`${API_URL}/api/v1/auth/me`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch user data');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('API error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_URL","initiateLogin","window","location","href","fetchUserData","token","response","fetch","headers","ok","Error","json","error","console"],"sources":["C:/Users/LufeBarreto/Desktop/ProjetoCloud/ibmecauth/frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js\r\nimport { API_URL } from '../utils/constants';\r\n\r\nexport const initiateLogin = () => {\r\n  window.location.href = `${API_URL}/auth/login`;\r\n};\r\n\r\nexport const fetchUserData = async (token) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/api/v1/auth/me`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch user data');\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('API error:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA,SAASA,OAAO,QAAQ,oBAAoB;AAE5C,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EACjCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAGJ,OAAO,aAAa;AAChD,CAAC;AAED,OAAO,MAAMK,aAAa,GAAG,MAAOC,KAAK,IAAK;EAC5C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,OAAO,iBAAiB,EAAE;MACxDS,OAAO,EAAE;QACP,eAAe,EAAE,UAAUH,KAAK;MAClC;IACF,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;IAC9C;IAEA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;IAClC,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}